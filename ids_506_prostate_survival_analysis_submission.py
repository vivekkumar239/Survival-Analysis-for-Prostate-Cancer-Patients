# -*- coding: utf-8 -*-
"""IDS-506 Prostate - Survival Analysis Submission.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VbeingMoOy9WZNSqifxgbL5CUTr9rCMi
"""

# Commented out IPython magic to ensure Python compatibility.
# %cd '/content/drive/MyDrive/IDS-506/Prostrate Cancer Identification'

!ls

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

training_data = pd.read_csv('training_data.csv')

training_data.head(5)

training_data.isna().sum()[training_data.isna().sum()>0].sort_values(ascending = False)

training_data['stage'].unique()

tranform_stage = {'stage': {'I':1, 'IV':5, 'IIB':3, 'IIA':2, 'III':4}}

training_data = training_data.replace(tranform_stage)

training_data['stage'].unique()

training_data = training_data.drop(['t_score', 'n_score', 'm_score'],axis=1)

training_data.shape

training_data['O01']=training_data['symptoms'].str.contains('O01')
training_data['O08']=training_data['symptoms'].str.contains('O08')
training_data['O09']=training_data['symptoms'].str.contains('O09')
training_data['O10']=training_data['symptoms'].str.contains('O10')
training_data['O11']=training_data['symptoms'].str.contains('O11')
training_data['P01']=training_data['symptoms'].str.contains('P01')
training_data['P02']=training_data['symptoms'].str.contains('P02')
training_data['P03']=training_data['symptoms'].str.contains('P03')
training_data['S04']=training_data['symptoms'].str.contains('S04')
training_data['S07']=training_data['symptoms'].str.contains('S07')
training_data['S10']=training_data['symptoms'].str.contains('S10')
training_data['U01']=training_data['symptoms'].str.contains('U01')
training_data['U02']=training_data['symptoms'].str.contains('U02')
training_data['U03']=training_data['symptoms'].str.contains('U03')
training_data['U05']=training_data['symptoms'].str.contains('U05')
training_data['U06']=training_data['symptoms'].str.contains('U06')

tranform_symptoms = {'O01' : {True : 1, False : 0}, 
                     'O08' : {True : 1, False : 0},
                     'O09' : {True : 1, False : 0},
                     'O10' : {True : 1, False : 0},
                     'O11' : {True : 1, False : 0},
                     'P01' : {True : 1, False : 0},
                     'P02' : {True : 1, False : 0},
                     'P03' : {True : 1, False : 0},
                     'S04' : {True : 1, False : 0},
                     'S07' : {True : 1, False : 0},
                     'S10' : {True : 1, False : 0},
                     'U01' : {True : 1, False : 0},
                     'U02' : {True : 1, False : 0},
                     'U03' : {True : 1, False : 0},
                     'U05' : {True : 1, False : 0},
                     'U06' : {True : 1, False : 0}
                     }

training_data = training_data.replace(tranform_symptoms)

training_data.drop('symptoms', axis=1, inplace=True)

training_data.shape

training_data.head(5)

training_data = pd.get_dummies(training_data, columns=['race'])

training_data.head(5)

#training_data.to_excel('training_data_clean.xlsx')

training_data_1 = pd.read_csv('training_data_clean_1.csv')

#Creating 3 different dataframes for logistic regression at three different time periods, t=0, t=6 months and t= 1 year

X_0 = training_data_1[['gleason_score', 'stage', 'age', 'height', 'weight', 'family_history', 'first_degree_history', 'previous_cancer', 'smoker', 'tumor_diagnosis', 'psa_diagnosis', 'tea', 'rd_thrpy', 'h_thrpy', 'chm_thrpy', 'cry_thrpy', 
                       'brch_thrpy', 'rad_rem', 'multi_thrpy', 'O01', 'O08', 'O09', 'O10', 'O11', 'P01', 'P02', 'P03', 'S04', 'S07', 'S10', 'U01', 'U02', 'U03', 'U05', 'U06', 'race_1.0', 'race_2.0', 'race_3.0', 'race_4.0']]
y_0 = training_data_1['survival_7_years']

X_1 = training_data_1[['gleason_score', 'stage', 'age', 'height', 'weight', 'family_history', 'first_degree_history', 'previous_cancer', 'smoker', 'tumor_6_months', 'psa_6_months', 'tea', 'rd_thrpy', 'h_thrpy', 'chm_thrpy',
                       'cry_thrpy', 'brch_thrpy', 'rad_rem', 'multi_thrpy', 'O01', 'O08', 'O09', 'O10', 'O11', 'P01', 'P02', 'P03', 'S04', 'S07', 'S10', 'U01', 'U02', 'U03', 'U05', 'U06', 'race_1.0', 'race_2.0', 'race_3.0', 'race_4.0']]
y_1 = training_data_1['survival_7_years']

X_2 = training_data_1[['gleason_score', 'stage', 'age', 'height', 'weight', 'family_history', 'first_degree_history', 'previous_cancer', 'smoker', 'tumor_1_year', 'psa_1_year', 'tea', 'rd_thrpy', 'h_thrpy', 'chm_thrpy',
                       'cry_thrpy', 'brch_thrpy', 'rad_rem', 'multi_thrpy', 'O01', 'O08', 'O09', 'O10', 'O11', 'P01', 'P02', 'P03', 'S04', 'S07', 'S10', 'U01', 'U02', 'U03', 'U05', 'U06', 'race_1.0', 'race_2.0', 'race_3.0', 'race_4.0']]
y_2 = training_data_1['survival_7_years']

#Dropping NAs for respective datasets
X_0 = X_0.dropna()
y_0 = y_0.iloc[X_0.index]

X_1 = X_1.dropna()
y_1 = y_1.iloc[X_1.index]

X_2 = X_2.dropna()
y_2 = y_2.iloc[X_2.index]

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix

X_train, X_test, y_train, y_test = train_test_split(X_0, y_0, test_size=0.2, random_state=42)
log_model = LogisticRegression(max_iter=10000)
log_model.fit(X_train,y_train)

predictions = log_model.predict(X_test)
print(classification_report(y_test,predictions))

print(confusion_matrix(y_test,predictions))

np.exp(log_model.coef_).shape

np.exp(log_model.coef_)

np.arange(0,39)

Columns = pd.DataFrame(X_0.columns)
coeffecients = pd.DataFrame(np.exp(log_model.coef_).reshape(39,1))
odds_ratio = pd.concat([Columns,coeffecients],axis=1)
print(odds_ratio)

#t=6 months
X_train, X_test, y_train, y_test = train_test_split(X_1, y_1, test_size=0.2, random_state=42)
log_model = LogisticRegression(max_iter=10000)
log_model.fit(X_train,y_train)

predictions = log_model.predict(X_test)
print(classification_report(y_test,predictions))

print(confusion_matrix(y_test,predictions))

Columns = pd.DataFrame(X_1.columns)
coeffecients = pd.DataFrame(np.exp(log_model.coef_).reshape(39,1))
odds_ratio = pd.concat([Columns,coeffecients],axis=1)
print(odds_ratio)

#t=1 year
X_train, X_test, y_train, y_test = train_test_split(X_2, y_2, test_size=0.2, random_state=42)
log_model = LogisticRegression(max_iter=10000)
log_model.fit(X_train,y_train)

predictions = log_model.predict(X_test)
print(classification_report(y_test,predictions))

print(confusion_matrix(y_test,predictions))

Columns = pd.DataFrame(X_2.columns)
coeffecients = pd.DataFrame(np.exp(log_model.coef_).reshape(39,1))
odds_ratio = pd.concat([Columns,coeffecients],axis=1)
print(odds_ratio)



#df_symptoms = df[['O01', 'O08', 'O09', 'O10', 'O11', 'P01', 'P02', 'P03', 'S04', 'S07', 'S10', 'U01', 'U02', 'U03', 'U05', 'U06', 'stage','survival_7_years']]
#mask = np.zeros_like(df_symptoms.corr())
#mask[np.triu_indices_from(mask)] = True
#fig, ax = plt.subplots(figsize=(15,10))
#sns.heatmap(df_symptoms.corr(),annot= True, ax=ax,mask=mask, linewidths=0.5, fmt=".2f", cmap='viridis', cbar=False)

#fig, ax = plt.subplots(figsize=(20,15))
#sns.heatmap(.corr(), ax=ax, cmap='viridis', annot=True, fmt=".2f", linewidths=0.25)

#df_therapy = df[['rd_thrpy',	'h_thrpy',	'chm_thrpy',	'cry_thrpy',	'brch_thrpy', 'rad_rem',	'multi_thrpy','stage','survival_7_years']]
#mask = np.zeros_like(df_therapy.corr())
#mask[np.triu_indices_from(mask)] = True
#fig, ax = plt.subplots(figsize=(8,6))
#sns.heatmap(df_therapy.corr(),annot= True, ax=ax,mask=mask, linewidths=0.5, fmt=".2f", cmap='viridis', cbar=False)

#fig, ax = plt.subplots(figsize=(15,10))
#sns.heatmap(.corr(), ax=ax, cmap='viridis', annot=True, fmt=".2f", linewidths=0.25)